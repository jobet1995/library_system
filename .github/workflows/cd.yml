name: Continuous Deployment

on:
  push:
    branches: [ main, production ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
  DOCKER_TAG: ${{ github.sha }}
  DEPLOY_ENV: ${{ github.ref == 'refs/heads/production' && 'production' || 'staging' }}
  DOMAIN: ${{ github.ref == 'refs/heads/production' && 'api.library_system.com' || 'staging.library_system.com' }}

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

      - name: Deploy to server
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          # Add the server's host key to known_hosts
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          
          # Copy necessary files to the server
          scp -r .env docker-compose.prod.yml nginx/ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}
          
          # Run the deployment script on the server
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
            cd ${{ secrets.DEPLOY_PATH }}
            export DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
            export DOCKER_IMAGE_NAME=${{ env.DOCKER_IMAGE_NAME }}
            export DOCKER_TAG=${{ env.DOCKER_TAG }}
            export DOMAIN=${{ env.DOMAIN }}
            export EMAIL=${{ secrets.EMAIL }}
            
            # Stop and remove existing containers
            docker-compose -f docker-compose.prod.yml down
            
            # Pull the latest image
            docker pull $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$DOCKER_TAG
            
            # Start the services
            docker-compose -f docker-compose.prod.yml up -d
            
            # Set up SSL certificate if it doesn't exist
            if [ ! -d "certbot/conf/live/$DOMAIN" ]; then
              mkdir -p certbot/conf certbot/www
              docker-compose -f docker-compose.prod.yml run --rm certbot certonly \
                --webroot --webroot-path /var/www/certbot \
                --email $EMAIL \
                --agree-tos --no-eff-email \
                -d $DOMAIN \
                --force-renewal
              
              # Restart nginx with SSL
              docker-compose -f docker-compose.prod.yml restart nginx
            fi
            
            # Run migrations
            docker-compose -f docker-compose.prod.yml exec -T web python manage.py migrate
            
            # Collect static files
            docker-compose -f docker-compose.prod.yml exec -T web python manage.py collectstatic --noinput
            
            # Restart the web service
            docker-compose -f docker-compose.prod.yml restart web
          "

      - name: Verify deployment
        run: |
          echo "Deployment to ${{ env.DEPLOY_ENV }} completed successfully!"
          echo "URL: https://${{ env.DOMAIN }}"
