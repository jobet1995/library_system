name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
      - stagingTest
      - staging
      - mergingTest
      - merging
      - production
  pull_request:
    branches:
      - develop
      - stagingTest
      - staging
      - mergingTest
      - merging
      - production

env:
  DOCKER_IMAGE_NAME: library-system
  DOCKER_REGISTRY: ghcr.io
  DOCKER_TAG: ${{ github.sha }}
  DB_NAME: test_library
  DB_USER: test_user
  DB_PASSWORD: test_password
  DB_HOST: localhost
  DB_PORT: 5432

jobs:
  test:
    name: Run Tests
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'stagingTest'
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.DB_NAME }}
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/develop' && 'development' || github.ref == 'refs/heads/production' && 'production' || contains(github.ref, 'staging') && 'staging' || contains(github.ref, 'merging') && 'pre-production' || 'unknown' }}
      DB_NAME: ${{ vars.DB_NAME || 'test_library' }}
      DB_USER: ${{ vars.DB_USER || 'test_user' }}
      DB_PASSWORD: ${{ vars.DB_PASSWORD || 'test_password' }}
      DB_HOST: ${{ vars.DB_HOST || 'localhost' }}
      DB_PORT: ${{ vars.DB_PORT || '5432' }}
      DATABASE_URL: postgresql://${{ vars.DB_USER || 'test_user' }}:${{ vars.DB_PASSWORD || 'test_password' }}@${{ vars.DB_HOST || 'localhost' }}:${{ vars.DB_PORT || '5432' }}/${{ vars.DB_NAME || 'test_library' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python with caching
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: '**/requirements.txt'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov
      - name: Run tests
        env:
          DJANGO_SETTINGS_MODULE: library_system.settings_test
        run: |
          python manage.py test --noinput
          pytest --cov=.

  build-and-push:
    name: Build and Push Docker Image
    needs: [test]
    if: always()
    runs-on: ubuntu-latest
    
    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/production' && 'production' || contains(github.ref, 'merging') && 'pre-prod' || contains(github.ref, 'staging') && 'staging' || 'latest' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.ENVIRONMENT }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    needs: build-and-push
    if: github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
      - name: Deploy to server
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          DOCKER_IMAGE_NAME: ${{ env.DOCKER_IMAGE_NAME }}
          DOCKER_TAG: ${{ env.DOCKER_TAG }}
        run: |
          # Create directory structure if it doesn't exist
          ssh $SSH_USER@$SSH_HOST "mkdir -p ~/library-system"
          
          # Copy docker-compose.prod.yml to server
          scp docker-compose.prod.yml $SSH_USER@$SSH_HOST:~/library-system/
          
          # Copy .env.prod to server (if it exists)
          if [ -f .env.prod ]; then
            scp .env.prod $SSH_USER@$SSH_HOST:~/library-system/.env
          fi
          
          # Log in to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull and deploy the new image
          ssh $SSH_USER@$SSH_HOST "
            cd ~/library-system
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d --force-recreate
            docker system prune -f
          "
