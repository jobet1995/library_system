# Generated by Django 5.2.6 on 2025-09-28 22:58

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("books", "0005_book_cover_image_book_language_book_shelf_location_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="BookCondition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text='Name of the condition (e.g., "New", "Good", "Worn")',
                        max_length=50,
                        unique=True,
                        verbose_name="name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of what this condition means",
                        null=True,
                        verbose_name="description",
                    ),
                ),
                (
                    "is_available",
                    models.BooleanField(
                        default=True,
                        help_text="Whether books in this condition are available for checkout",
                        verbose_name="is available",
                    ),
                ),
            ],
            options={
                "verbose_name": "book condition",
                "verbose_name_plural": "book conditions",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text='Name of the location (e.g., "Main Stacks", "Reference Section")',
                        max_length=100,
                        verbose_name="name",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text='Short code for the location (e.g., "MS" for Main Stacks)',
                        max_length=20,
                        unique=True,
                        verbose_name="code",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the location",
                        null=True,
                        verbose_name="description",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this location is currently in use",
                        verbose_name="is active",
                    ),
                ),
            ],
            options={
                "verbose_name": "location",
                "verbose_name_plural": "locations",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="BookCopy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "barcode",
                    models.CharField(
                        help_text="Unique barcode for this copy",
                        max_length=50,
                        unique=True,
                        verbose_name="barcode",
                    ),
                ),
                (
                    "call_number",
                    models.CharField(
                        help_text="Call number for this copy",
                        max_length=100,
                        verbose_name="call number",
                    ),
                ),
                (
                    "acquisition_date",
                    models.DateField(
                        blank=True,
                        help_text="When this copy was acquired by the library",
                        null=True,
                        verbose_name="acquisition date",
                    ),
                ),
                (
                    "acquisition_source",
                    models.CharField(
                        blank=True,
                        help_text="Source of acquisition (e.g., purchase, donation)",
                        max_length=200,
                        null=True,
                        verbose_name="acquisition source",
                    ),
                ),
                (
                    "acquisition_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Cost to acquire this copy",
                        max_digits=10,
                        null=True,
                        verbose_name="acquisition cost",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("available", "Available"),
                            ("checked_out", "Checked Out"),
                            ("on_hold", "On Hold"),
                            ("lost", "Lost"),
                            ("withdrawn", "Withdrawn"),
                            ("in_repair", "In Repair"),
                            ("on_order", "On Order"),
                            ("reserved", "Reserved"),
                        ],
                        default="available",
                        help_text="Current status of this copy",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Any additional notes about this copy",
                        null=True,
                        verbose_name="notes",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this record was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When this record was last updated",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "book",
                    models.ForeignKey(
                        help_text="The book this is a copy of",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="copies",
                        to="books.book",
                        verbose_name="book",
                    ),
                ),
                (
                    "condition",
                    models.ForeignKey(
                        blank=True,
                        help_text="Current condition of this copy",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="book_copies",
                        to="inventory.bookcondition",
                        verbose_name="condition",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        help_text="Current location of this copy",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="book_copies",
                        to="inventory.location",
                        verbose_name="location",
                    ),
                ),
            ],
            options={
                "verbose_name": "book copy",
                "verbose_name_plural": "book copies",
                "ordering": ["book__title", "barcode"],
            },
        ),
        migrations.CreateModel(
            name="InventoryCheck",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name or description of this inventory check",
                        max_length=100,
                        verbose_name="name",
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this inventory check was started",
                        verbose_name="start date",
                    ),
                ),
                (
                    "end_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this inventory check was completed",
                        null=True,
                        verbose_name="end date",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Any notes about this inventory check",
                        null=True,
                        verbose_name="notes",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="inventory_checks_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        help_text="Location being inventoried (if specific to one location)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="inventory_checks",
                        to="inventory.location",
                        verbose_name="location",
                    ),
                ),
            ],
            options={
                "verbose_name": "inventory check",
                "verbose_name_plural": "inventory checks",
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="InventoryRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("available", "Available"),
                            ("checked_out", "Checked Out"),
                            ("on_hold", "On Hold"),
                            ("lost", "Lost"),
                            ("withdrawn", "Withdrawn"),
                            ("in_repair", "In Repair"),
                            ("on_order", "On Order"),
                            ("reserved", "Reserved"),
                        ],
                        help_text="Status of the book copy at the time of inventory",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Any notes about this inventory record",
                        null=True,
                        verbose_name="notes",
                    ),
                ),
                (
                    "scanned_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this copy was scanned during inventory",
                        verbose_name="scanned at",
                    ),
                ),
                (
                    "book_copy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="inventory_records",
                        to="inventory.bookcopy",
                        verbose_name="book copy",
                    ),
                ),
                (
                    "condition",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="inventory_records",
                        to="inventory.bookcondition",
                        verbose_name="condition",
                    ),
                ),
                (
                    "inventory_check",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="records",
                        to="inventory.inventorycheck",
                        verbose_name="inventory check",
                    ),
                ),
                (
                    "scanned_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="inventory_records",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="scanned by",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="inventory_records",
                        to="inventory.location",
                        verbose_name="location",
                    ),
                ),
            ],
            options={
                "verbose_name": "inventory record",
                "verbose_name_plural": "inventory records",
                "ordering": ["-scanned_at"],
                "unique_together": {("inventory_check", "book_copy")},
            },
        ),
        migrations.AddIndex(
            model_name="bookcopy",
            index=models.Index(fields=["barcode"], name="inventory_barcode_idx"),
        ),
        migrations.AddIndex(
            model_name="bookcopy",
            index=models.Index(fields=["status"], name="inventory_status_idx"),
        ),
    ]
