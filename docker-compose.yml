version: '3.8'

services:
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${DB_NAME:-library_db}
      POSTGRES_USER: ${DB_USER:-library_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-library_password}
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-library_user} -d ${DB_NAME:-library_db}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  web:
    build: .
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_ENGINE=${DB_ENGINE:-django.db.backends.postgresql}
      - DB_NAME=${DB_NAME:-library_db}
      - DB_USER=${DB_USER:-library_user}
      - DB_PASSWORD=${DB_PASSWORD:-library_password}
      - DB_HOST=db  # Use the service name as host
      - DB_PORT=5432
      - POSTGRES_DB=${DB_NAME:-library_db}
      - POSTGRES_USER=${DB_USER:-library_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-library_password}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DEBUG=${DEBUG:-1}
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - DJANGO_SETTINGS_MODULE=library_system.settings
    networks:
      - app-network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  nginx:
    build: ./nginx
    ports:
      - "80:80"
    depends_on:
      - web
    volumes:
      - ./staticfiles:/app/staticfiles
      - ./media:/app/media
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
